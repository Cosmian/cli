---
name: CI checks

on:
  workflow_call:
    inputs:
      toolchain:
        required: true
        type: string
      debug_or_release:
        required: true
        type: string

jobs:
  cargo-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: EmbarkStudios/cargo-deny-action@v2
        id: cargo-deny
        continue-on-error: true
      
      - name: Create GitHub issues for RUSTSEC vulnerabilities
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check for RUSTSEC advisories and create issues
          if cargo deny check advisories 2>&1 | grep -q "RUSTSEC-"; then
            # Extract RUSTSEC IDs from cargo-deny output
            RUSTSEC_IDS=$(cargo deny check advisories 2>&1 | grep -oE "RUSTSEC-[0-9]{4}-[0-9]{4}" | sort -u)
            
            for RUSTSEC_ID in $RUSTSEC_IDS; do
              # Check if issue already exists
              if ! gh issue list --search "\"$RUSTSEC_ID\"" --json title | grep -q "$RUSTSEC_ID"; then
                # Create issue for new RUSTSEC vulnerability
                gh issue create \
                  --title "$RUSTSEC_ID: Security vulnerability detected" \
                  --body "**Vulnerability ID:** $RUSTSEC_ID
          
          **Advisory:** https://rustsec.org/advisories/$RUSTSEC_ID
          
          **Description:** A security vulnerability was detected by cargo-deny. Please review the advisory and update the affected dependencies.
          
          **Solution:** Check the advisory link above for specific upgrade instructions.
          
          ---
          *This issue was automatically created by the security audit workflow.*" \
                  --label "security"
                echo "Created issue for $RUSTSEC_ID"
              else
                echo "Issue for $RUSTSEC_ID already exists"
              fi
            done
          fi
          
          # Re-run cargo-deny to fail the job if vulnerabilities exist
          cargo deny check advisories

  cargo-lint:
    uses: Cosmian/reusable_workflows/.github/workflows/clippy.yml@develop
    with:
      toolchain: ${{ inputs.toolchain }}

  cargo-machete:
    uses: Cosmian/reusable_workflows/.github/workflows/cargo-machete.yml@develop
    with:
      toolchain: ${{ inputs.toolchain }}

  cargo-publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Publishing - dry run
        run: |
          cargo +nightly publish --dry-run --workspace -Z package-workspace \
            --exclude cosmian_findex_cli \
            --exclude cosmian_findex_client \
            --exclude cosmian_findex_structs \
            --exclude cosmian_findex_server \
            --exclude test_findex_server \
            --exclude cosmian_kms_access \
            --exclude cosmian_kms_cli \
            --exclude cosmian_kms_client_utils \
            --exclude cosmian_kms_crypto \
            --exclude cosmian_kms_base_hsm \
            --exclude cosmian_kms_proteccio \
            --exclude cosmian_kms_utimaco \
            --exclude cosmian_kms_softhsm2 \
            --exclude cosmian_kms_interfaces \
            --exclude cosmian_kms_kmip \
            --exclude cosmian_kms_kmip-derive \
            --exclude cosmian_kms_client \
            --exclude cosmian_kms_server \
            --exclude test_kms_server \
            --exclude cosmian_kms_server_database

      - name: Publishing
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          cargo +nightly publish --workspace -Z package-workspace --token ${{ secrets.CRATES_IO }} \
            --exclude cosmian_findex_cli \
            --exclude cosmian_findex_client \
            --exclude cosmian_findex_structs \
            --exclude cosmian_findex_server \
            --exclude test_findex_server \
            --exclude cosmian_kms_access \
            --exclude cosmian_kms_cli \
            --exclude cosmian_kms_client_utils \
            --exclude cosmian_kms_crypto \
            --exclude cosmian_kms_base_hsm \
            --exclude cosmian_kms_proteccio \
            --exclude cosmian_kms_utimaco \
            --exclude cosmian_kms_softhsm2 \
            --exclude cosmian_kms_interfaces \
            --exclude cosmian_kms_kmip \
            --exclude cosmian_kms_kmip-derive \
            --exclude cosmian_kms_client \
            --exclude cosmian_kms_server \
            --exclude test_kms_server \
            --exclude cosmian_kms_server_database

  build:
    uses: Cosmian/reusable_workflows/.github/workflows/build_all.yml@develop
    secrets: inherit
    with:
      toolchain: ${{ inputs.toolchain }}
      debug_or_release: ${{ inputs.debug_or_release }}

  ##############################################################################
  ### Releases
  ##############################################################################
  release:
    name: release
    needs:
      - cargo-audit
      - cargo-lint
      - build
    uses: Cosmian/reusable_workflows/.github/workflows/push-artifacts.yml@develop
    with:
      project-name: cli
      destination: cli # /mnt/packages/cli
      debug_or_release: ${{ inputs.debug_or_release }}

  public_documentation:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Deploy documentation in staging
        if: ${{ github.ref_name == 'develop' }}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: staging.yml
          repo: Cosmian/public_documentation
          ref: develop
          token: ${{ secrets.PAT_TOKEN }}

      - name: Deploy documentation in prod
        if: startsWith(github.ref, 'refs/tags')
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: prod.yml
          repo: Cosmian/public_documentation
          ref: main
          token: ${{ secrets.PAT_TOKEN }}
